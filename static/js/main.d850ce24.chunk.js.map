{"version":3,"sources":["firebase.js","components/Nav.js","components/Header.js","Wishlist.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Nav","toggleWishlist","setState","show","state","transferState","stateOfList","props","toggleList","className","href","onClick","icon","React","Component","Header","Wishlist","key","this","src","imageSrc","alt","imageAlt","name","removeItem","trash","Footer","id","library","add","fab","faShoppingCart","faStar","faCodeBranch","faTrash","faTimes","App","addItem","wishlistItem","database","ref","push","itemToBeRemoved","console","log","child","remove","wishlistToggle","wallpapers","wishlist","showFave","on","response","toSetState","data","val","item","map","listItem","title","wallpaper","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d850ce24.chunk.js","sourcesContent":["// firebase.js\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n// initializing Firebase\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCZl8jhHc9cCv4XWDc_ToMCmrTET3-A8rY\",\n    authDomain: \"sunday-homework.firebaseapp.com\",\n    databaseURL: \"https://sunday-homework.firebaseio.com\",\n    projectId: \"sunday-homework\",\n    storageBucket: \"sunday-homework.appspot.com\",\n    messagingSenderId: \"1069170856330\",\n    appId: \"1:1069170856330:web:edc69f388f24f7f27fb873\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass Nav extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      show: false,\n    };\n  }\n\n  //set the state and pass it into transfer state fucntion\n  toggleWishlist = () => {\n    this.setState({\n      show: !this.state.show,\n    }, \n    () => {\n        this.transferState(this.state.show);\n    });\n  };\n\n  //send current state back to parent to apply\n  transferState = (stateOfList) => {\n    this.props.toggleList(stateOfList);\n  };\n\n  render() {\n\n    return (\n      <div className=\"nav\">\n        <div className=\"flex-header wrapper\">\n          <nav>\n            <ul>\n              <li>\n                <a href=\"#home\">Home</a>\n              </li>\n              <li>\n                <a href=\"#shop\">Shop</a>\n              </li>\n              <li>\n                <a href=\"#about\">About</a>\n              </li>\n              <li>\n                <a href=\"#blog\">Blog</a>\n              </li>\n              <li>\n                <a href=\"#contact\">Contact</a>\n              </li>\n            </ul>\n\n\n            \n          </nav>\n\n          <ul className=\"nav-icons\">\n            <li>\n              {/* toggle the wishlist on click */}\n              <button\n                onClick={() => {\n                  this.toggleWishlist();\n                }}\n              >\n                <p className=\"sr-only\"> Click here to open your wishlist.</p>\n                <FontAwesomeIcon icon=\"star\" />\n              </button>\n\n            </li>\n\n            <li>\n\n              <button>\n                <p className=\"sr-only\"> Click here to open your shopping cart.</p>\n                <FontAwesomeIcon icon=\"shopping-cart\" />\n              </button>\n\n            </li>\n\n          </ul>\n\n        </div>\n      </div>\n    );\n  }\n} \n\nexport default Nav;","import React from 'react';\n\nconst Header = () => {\n    return(\n        <section className='header-text'>\n                <h1>\n                    <span className='sunday'>Sunday</span>\n                    <span className='homework'>Homework</span>\n                </h1>\n\n                <p className='tagline'>\n                    created on a lazy sunday morning, with coffee in hand\n                </p>\n        </section>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass Wishlist extends React.Component {\n  render(){\n    return (\n      <li className=\"wishlist-flex\" key={this.props.key}>\n        \n        <img src={this.props.imageSrc} alt={this.props.imageAlt} />\n\n        <p>{this.props.name}</p>\n        <button onClick={this.props.removeItem}>\n          <p className=\"sr-only\">Click here to remove this item from your wishlist.</p>\n          <FontAwesomeIcon icon={this.props.trash} />\n        </button>\n      </li>\n    );\n\n  }\n}\n\n\nexport default Wishlist;","import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nconst Footer = () => {\n    return (\n      <footer>\n        <div className=\"footer-flex wrapper\">\n          <div className=\"footer-text\" id=\"about\">\n\n            <p>\n              Created at <a href=\"https://junocollege.com/\">Juno College</a>\n            </p>\n\n            <p>\n              Design + wallpapers by \n              <a href=\"https://apesfilmdiary.com/\" id=\"blog\"> Aprille Balsom</a>\n            </p>\n\n          </div>\n\n          <div className=\"footer-icons\" id=\"contact\">\n\n            <p>join us on social</p>\n\n            <div className=\"icons\">\n              <a href=\"https://github.com/aprillebalsom\">\n                <FontAwesomeIcon icon=\"code-branch\" />\n              </a>\n\n              <a href=\"https://instagram.com/apesfilmdiary\">\n                <FontAwesomeIcon icon={[\"fab\", \"instagram\"]} />\n              </a>\n\n              <a href=\"https://twitter.com/apebalsom\">\n                <FontAwesomeIcon icon={[\"fab\", \"twitter\"]} />\n              </a>\n            </div>\n            \n          </div>\n        </div>\n      </footer>\n    );\n} \n\nexport default Footer;","import React from 'react';\nimport firebase from './firebase';\nimport ToggleDisplay from 'react-toggle-display';\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport {faShoppingCart,faStar,faCodeBranch,faTrash,faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./App.css\";\n\n//IMPORTING OF OTHER COMPONENTS\nimport Nav from \"./components/Nav.js\";\nimport Header from './components/Header.js';\nimport Wishlist from './Wishlist.js';\nimport Footer from './components/Footer.js';\n\nlibrary.add(fab, faShoppingCart, faStar, faCodeBranch, faTrash, faTimes);\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      wallpapers: [],\n      wishlist: [],\n      show: false,\n      showFave: false,\n    }\n  }\n\n  componentDidMount() {\n    //get wallpaper information from database\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (response) => {\n      const toSetState = [];\n      const data = response.val();\n\n      for (let key in data.wallpapers) {\n        toSetState.push({\n          item: data.wallpapers[key],\n          key: key,\n        });\n      }\n\n      this.setState({\n        wallpapers: toSetState,\n      });\n    });\n\n    //get wishlist information from database\n    const dbRefWishlist = firebase.database().ref(\"wishlistItems\");\n\n    dbRefWishlist.on(\"value\", (response) => {\n      const toSetState = [];\n      const data = response.val();\n\n      for (let key in data) {\n        toSetState.push({\n          key: key,\n          item: data[key].item,\n        });\n      }\n\n      this.setState({\n        wishlist: toSetState,\n      });\n    });\n  }\n\n  //create a function that adds an item to the wishlist, when a user clicks the \"add to wishlist\" button\n  addItem = (wishlistItem) => {\n    const dbRef = firebase.database().ref(\"wishlistItems\");\n\n    dbRef.push(wishlistItem);\n    // TODO add if statement, maybe have to use filter?!\n  };\n\n  // create a function to remove items from the wishlist + firebase when the user clicks the \"garbage can\" button\n  removeItem = (itemToBeRemoved) => {\n    console.log(itemToBeRemoved);\n\n    const dbRef = firebase.database().ref(\"wishlistItems\");\n    dbRef.child(itemToBeRemoved).remove();\n\n  };\n\n  wishlistToggle = () => {\n    this.setState({\n      show: !this.state.show,\n    });\n\n    console.log(this.state.show);\n  };\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        \n        <Nav toggleList={this.wishlistToggle} />\n       \n        <header id=\"home\">\n        \n          <div className=\"flex-container wrapper\">\n\n           <Header />\n\n            <ToggleDisplay show={this.state.show}>\n\n              <section className=\"wishlist\">\n\n                <div className=\"wishlist-header\">\n\n                  <button onClick={() => this.wishlistToggle()}>\n                    <p className=\"sr-only\">Close the wishlist by clicking here</p>\n                    <FontAwesomeIcon icon='times' />\n                  </button>\n\n                  <h2>Wishlist</h2>\n\n                </div>\n\n                <ul>\n\n                  {this.state.wishlist.map((listItem) => {\n                    return (\n\n                      <Wishlist\n                        name={listItem.item.title}\n                        imageSrc={listItem.item.src}\n                        imageAlt={listItem.item.alt}\n                        removeItem={() => {\n                          this.removeItem(listItem.key);\n                        }}\n                        key={listItem.key}\n                        trash={faTrash}\n                      />\n\n                    );\n                  })}\n                </ul>\n\n              </section>\n            </ToggleDisplay>\n\n          </div>\n        </header>\n\n        <div className=\"items\" id=\"shop\">\n          <div className=\"wrapper\">\n            <h2>Meet the Doodles</h2>\n            <p>digital wallpapers drawn by hand + shot on 35mm film</p>\n\n            <ul>\n              {this.state.wallpapers.map((wallpaper) => {\n                return (\n                  <li key={wallpaper.key}>\n                    <div className=\"item\">\n                      <div className=\"item-img\">\n\n                        <img\n                          src={wallpaper.item.src}\n                          alt={wallpaper.item.alt}\n                        />\n{/* \n                        <ToggleDisplay show={this.state.showFave.state} >\n                          <p className=\"star-sticker\">\n                            <FontAwesomeIcon icon=\"star\" />\n                          </p>\n                        </ToggleDisplay> */}\n\n                      </div>\n                      <p>{wallpaper.item.title}</p>\n                      <p>$5.00</p>\n                    </div>\n\n                    <button\n                      onClick={() => {\n                        this.addItem(wallpaper, wallpaper.key)}} \n                    >\n                      Add to wishlist\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}